[{"content":"RNote 手写笔记软件详解 前言 随着数字时代的到来，越来越多的人开始使用电子设备进行笔记和创作。作为一款专注于手写体验的笔记软件，RNote以其独特的设计理念和强大功能，成为众多用户心中的优选。本文将从软件特点、使用体验、设计理念等方面，为大家全面介绍RNote，希望能够帮助你更好地了解和使用这款高效的手写笔记工具。\nSketch and take handwritten notes.\nrnote.flxzt.net\n一、什么是RNote？ RNote是一款专注于手写笔记的应用软件，支持多平台使用，致力于为用户提供流畅自然的书写体验。无论是学习笔记、会议记录，还是创意思维导图，RNote都能满足不同场景下的需求。\n它的界面简洁，操作直观，特别适合习惯用手写方式记录内容的用户。相比传统的纸质笔记，RNote不仅环保、易于保存，还能通过数字化管理提升查阅和编辑的效率。\n二、RNote的核心特色 1. 自然流畅的书写体验 RNote采用先进的笔迹捕捉技术，支持多种手写笔的压力感应和倾斜角度识别，保证书写过程中的精准与顺滑，带来接近真实纸笔的书写质感。\n2. 无限画布与灵活缩放 借鉴类似Pizarra这样具备无限画布和无限缩放功能的绘图应用，RNote支持用户在笔记中自由扩展内容，无需担心空间限制，方便思路的自由延展与分层整理。\n3. 智能图形识别与辅助绘制 用户在绘制图形时，RNote可以自动识别并优化形状，提升整体笔记的美观与专业度，非常适合需要绘制流程图、示意图的场景。\n4. 丰富的页面组织和标签管理 RNote支持多级文件夹、标签以及强大的搜索功能，方便用户对海量笔记进行高效分类和快速定位。\n5. 多设备同步与云端备份 支持跨平台同步，数据自动上传至云端，避免因设备损坏或丢失带来的数据风险，且随时随地查看和编辑笔记。\n三、设计灵感与架构优势 RNote的整体架构和设计灵感很大程度上受到创新绘图软件Pizarra的启发。Pizarra以其高级的图形变换和无限缩放功能为特点，RNote借鉴了其技术实现方式，结合手写笔记的需求，实现了更适合文字和图形混排的功能。\n这种架构使RNote在性能和灵活性上都表现优异，用户可以享受到无缝衔接的书写和绘图体验，实现创意和记录的完美结合。\n四、适用人群与使用场景 学生党：快速记录课堂重点，支持手写公式与图表，方便课后复习。 职场人士：会议记录与创意整理，结合多媒体插入，提高工作效率。 设计师与创作者：绘制草图与灵感捕捉，支持导出多种格式，便于分享。 爱好者：日常随笔与生活记录，体验数字笔记的便捷与趣味。 五、总结 RNote是一款兼具创新技术与实用功能的高效手写笔记软件。它不仅重视书写的自然流畅，更在画布自由度、图形智能化和多端协同方面体现出强大优势。结合了灵感来源Pizarra的架构优势，RNote为用户带来了极致的数字手写体验。\n如果你正在寻找一款能够替代纸质笔记，同时保留手写魅力的电子笔记软件，RNote值得一试！\n如果你对RNote感兴趣，不妨下载试用一下，体验这款结合创新设计与高效功能的手写笔记利器。\n相关阅读：\nPizarra官网（灵感来源，优秀的无限缩放绘图工具） ","date":"2025-10-13T18:34:25-08:00","permalink":"https://hanguangwu.github.io/p/%E6%89%8B%E5%86%99%E7%AC%94%E8%AE%B0%E8%BD%AF%E4%BB%B6rnote/","title":"手写笔记软件RNote"},{"content":"前言 抢红包功能实现主要包括发红包、抢红包、记红包和拆红包四块。\n教程来源：BV13R4y1v7sP\n配置说明 JDK21\n相关代码 Pom.xml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;project xmlns=\u0026#34;http://maven.apache.org/POM/4.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\u0026#34;\u0026gt; \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt; \u0026lt;parent\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-parent\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.5.5\u0026lt;/version\u0026gt; \u0026lt;relativePath/\u0026gt; \u0026lt;!-- lookup parent from repository --\u0026gt; \u0026lt;/parent\u0026gt; \u0026lt;groupId\u0026gt;com.tianhan\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;demo\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;0.0.1-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;name\u0026gt;demo\u0026lt;/name\u0026gt; \u0026lt;description\u0026gt;demo\u0026lt;/description\u0026gt; \u0026lt;url/\u0026gt; \u0026lt;licenses\u0026gt; \u0026lt;license/\u0026gt; \u0026lt;/licenses\u0026gt; \u0026lt;developers\u0026gt; \u0026lt;developer/\u0026gt; \u0026lt;/developers\u0026gt; \u0026lt;scm\u0026gt; \u0026lt;connection/\u0026gt; \u0026lt;developerConnection/\u0026gt; \u0026lt;tag/\u0026gt; \u0026lt;url/\u0026gt; \u0026lt;/scm\u0026gt; \u0026lt;properties\u0026gt; \u0026lt;java.version\u0026gt;21\u0026lt;/java.version\u0026gt; \u0026lt;/properties\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;!-- Spring Boot Web --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-web\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- HL: SLF4J 与日志落地（如果需要显式声明） --\u0026gt; \u0026lt;!-- Logback 是 Spring Boot 的默认实现，通常不必额外声明 --\u0026gt; \u0026lt;!-- 仅在你有特殊日志需求时才添加以下依赖 --\u0026gt; \u0026lt;!-- \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;ch.qos.logback\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;logback-classic\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; --\u0026gt; \u0026lt;!-- Spring Data Redis --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-data-redis\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- MySQL 驱动（运行时） --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.mysql\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mysql-connector-j\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;runtime\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- Lombok（编译时注解处理） --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.projectlombok\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;lombok\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.18.38\u0026lt;/version\u0026gt; \u0026lt;scope\u0026gt;provided\u0026lt;/scope\u0026gt; \u0026lt;!-- 如在 IDE/构建时需要，可改为无 scope --\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- 测试相关 --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-test\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt; \u0026lt;/project\u0026gt; RedisConfig.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 package com.example.demo.config; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory; import org.springframework.data.redis.core.RedisTemplate; import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer; import org.springframework.data.redis.serializer.StringRedisSerializer; import com.fasterxml.jackson.annotation.JsonAutoDetect; import com.fasterxml.jackson.annotation.PropertyAccessor; import com.fasterxml.jackson.databind.ObjectMapper; @Configuration public class RedisConfig { /** * *redis序列化的工具定置类，下面这个请一定开启配置 * *127.0.0.1:6379\u0026gt; keys * * *1) “ord:102” 序列化过 * *2)“\\xac\\xed\\x00\\x05t\\x00\\aord:102” 野生，没有序列化过 * *this.redisTemplate.opsForValue(); //提供了操作string类型的所有方法 * *this.redisTemplate.opsForList();// 提供了操作List类型的所有方法 * *this.redisTemplate.opsForSet(); //提供了操作set类型的所有方法 * *this.redisTemplate.opsForHash(); //提供了操作hash类型的所有方认 * *this.redisTemplate.opsForZSet(); //提供了操作zset类型的所有方法 * param LettuceConnectionFactory * return */ /** * 自定义Redis序列化配置 * 使用Jackson2JsonRedisSerializer并配置ObjectMapper，避免在序列化时添加类型信息 * @param lettuceConnectionFactory Redis连接工厂 * @return 配置好的RedisTemplate实例 */ @Bean public RedisTemplate\u0026lt;String, Object\u0026gt; redisTemplate(LettuceConnectionFactory lettuceConnectionFactory) { RedisTemplate\u0026lt;String,Object\u0026gt; redisTemplate = new RedisTemplate\u0026lt;\u0026gt;(); redisTemplate.setConnectionFactory(lettuceConnectionFactory); // 创建Jackson2JsonRedisSerializer序列化器 Jackson2JsonRedisSerializer\u0026lt;Object\u0026gt; jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer\u0026lt;\u0026gt;(Object.class); // 配置ObjectMapper ObjectMapper objectMapper = new ObjectMapper(); // 指定要序列化的域，field,get和set,以及修饰符范围，ANY是都有包括private和public objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY); // 不启用默认类型，避免在序列化时添加类型信息 jackson2JsonRedisSerializer.setObjectMapper(objectMapper); // 设置key序列化方式string redisTemplate.setKeySerializer(new StringRedisSerializer()); // 设置value的序列化方式 redisTemplate.setValueSerializer(jackson2JsonRedisSerializer); redisTemplate.setHashKeySerializer(new StringRedisSerializer()); redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer); redisTemplate.afterPropertiesSet(); return redisTemplate; } } RedisKeyConstants.java 1 2 3 4 5 6 package com.example.demo.constant; public class RedisKeyConstants { public static final String RED_PACKAGE_KEY = \u0026#34;redpackage:\u0026#34;; public static final String RED_PACKAGE_CONSUME_KEY = \u0026#34;redpackage:consume\u0026#34;; } RedPackageController.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 package com.example.demo.controller; import com.example.demo.dto.ApiResponse; import com.example.demo.service.RedPackageService; import jakarta.annotation.Resource; import lombok.extern.slf4j.Slf4j; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.RestController; import java.util.List; @RestController @Slf4j @RequestMapping(\u0026#34;/red\u0026#34;) public class RedPackageController { @Resource private RedPackageService redPackageService; // 发送红包，返回 JSON：{ code:0, message:\u0026#34;success\u0026#34;, data: { key: \u0026#34;...\u0026#34;, amounts: [...] } } @GetMapping(\u0026#34;/send\u0026#34;) public ApiResponse\u0026lt;RedPackageResponse\u0026gt; sendRedPackage(@RequestParam int totalMoney, @RequestParam int redpackageNumber) { try { String key = redPackageService.writeRedPackages(totalMoney, redpackageNumber); // 重新获取一次拆分金额用于返回 List\u0026lt;Integer\u0026gt; amounts = redPackageService.splitRedPackageAlgorithm(totalMoney, redpackageNumber); RedPackageResponse payload = new RedPackageResponse(key, amounts); return ApiResponse.success(payload); } catch (Exception ex) { // 统一错误处理 return ApiResponse.fail(1001, \u0026#34;发送红包失败：\u0026#34; + ex.getMessage()); } } // 抢红包，返回 JSON：{ code:0, message:\u0026#34;success\u0026#34;, data: amount } 或错误信息 @GetMapping(\u0026#34;/rob\u0026#34;) public ApiResponse\u0026lt;String\u0026gt; robRedPackage(@RequestParam String redpackageKey, @RequestParam String userId) { log.info(\u0026#34;userId = {}\u0026#34;, userId); try { Integer amount = redPackageService.rob(redpackageKey, userId); if (amount == -1) { return ApiResponse.fail(-1, \u0026#34;红包已抢完\u0026#34;); } return ApiResponse.success(amount.toString()); } catch (IllegalStateException ie) { return ApiResponse.fail(-2, ie.getMessage()); } catch (Exception ex) { return ApiResponse.fail(1002, \u0026#34;抢红包失败：\u0026#34; + ex.getMessage()); } } // 内部响应数据对象，用于 /send 的 data 字段 public static class RedPackageResponse { private String key; private List\u0026lt;Integer\u0026gt; amounts; public RedPackageResponse(String key, List\u0026lt;Integer\u0026gt; amounts) { this.key = key; this.amounts = amounts; } public String getKey() { return key; } public void setKey(String key) { this.key = key; } public List\u0026lt;Integer\u0026gt; getAmounts() { return amounts; } public void setAmounts(List\u0026lt;Integer\u0026gt; amounts) { this.amounts = amounts; } } } ApiResponse.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 package com.example.demo.dto; public class ApiResponse\u0026lt;T\u0026gt; { private int code; private String message; private T data; public ApiResponse() { } private ApiResponse(int code, String message, T data) { this.code = code; this.message = message; this.data = data; } public static \u0026lt;T\u0026gt; ApiResponse\u0026lt;T\u0026gt; success(T data) { return new ApiResponse\u0026lt;\u0026gt;(0, \u0026#34;success\u0026#34;, data); } public static \u0026lt;T\u0026gt; ApiResponse\u0026lt;T\u0026gt; fail(int code, String message) { return new ApiResponse\u0026lt;\u0026gt;(code, message, null); } // getters and setters public int getCode() { return code; } public void setCode(int code) { this.code = code; } public String getMessage() { return message; } public void setMessage(String message) { this.message = message; } public T getData() { return data; } public void setData(T data) { this.data = data; } } RedPackageServiceImpl.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 package com.example.demo.service.impl; import com.example.demo.constant.RedisKeyConstants; import com.example.demo.service.RedPackageService; import jakarta.annotation.Resource; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.data.redis.core.RedisTemplate; import org.springframework.stereotype.Service; import java.util.Arrays; import java.util.List; import java.util.Random; import java.util.UUID; import java.util.concurrent.TimeUnit; @Service public class RedPackageServiceImpl implements RedPackageService { private static final Logger logger = LoggerFactory.getLogger(RedPackageServiceImpl.class); @Resource private RedisTemplate\u0026lt;String, Object\u0026gt; redisTemplate; @Override public String writeRedPackages(int totalMoney, int redpackageNumber) { String key = RedisKeyConstants.RED_PACKAGE_KEY + UUID.randomUUID().toString().replace(\u0026#34;-\u0026#34;, \u0026#34;\u0026#34;); // 将 Integer[] 转为 List\u0026lt;Integer\u0026gt;，直接写入 Redis，会出现问题，可以参考[redisTemplate中leftPushAll隐性bug的问题](https://blog.csdn.net/cdnight/article/details/88803869) List\u0026lt;Integer\u0026gt; splitList = splitRedPackageAlgorithm(totalMoney, redpackageNumber); Integer[] splitArray = splitList.toArray(new Integer[0]); logger.info(\u0026#34;Created red package key: {}, amounts: {}\u0026#34;, key, splitArray); redisTemplate.opsForList().leftPushAll(key, splitArray); redisTemplate.expire(key, 1, TimeUnit.DAYS); // 这里返回 key，前端再结合 amounts 解析 return key; } @Override public Integer rob(String redpackageKey, String userId) throws Exception { Object redPackage = redisTemplate.opsForHash().get(RedisKeyConstants.RED_PACKAGE_CONSUME_KEY + redpackageKey, userId); if (redPackage == null) { Object partRedPackage = redisTemplate.opsForList().leftPop(RedisKeyConstants.RED_PACKAGE_KEY + redpackageKey); if (partRedPackage != null) { redisTemplate.opsForHash().put(RedisKeyConstants.RED_PACKAGE_CONSUME_KEY + redpackageKey, userId, partRedPackage); logger.info(\u0026#34;User {} robbed {} from {}\u0026#34;, userId, partRedPackage, redpackageKey); return Integer.valueOf(partRedPackage.toString()); } return -1; } // 已抢过 throw new IllegalStateException(\u0026#34;User \u0026#34; + userId + \u0026#34; 已经抢过了\u0026#34;); } @Override public List\u0026lt;Integer\u0026gt; splitRedPackageAlgorithm(int totalMoney, int redpackageNumber) { Integer[] redpackageNumbers = new Integer[redpackageNumber]; int useMoney = 0; Random random = new Random(); for (int i = 0; i \u0026lt; redpackageNumber; i++) { if (i == redpackageNumber - 1) { redpackageNumbers[i] = totalMoney - useMoney; } else { int avgMoney = ((totalMoney - useMoney) / (redpackageNumber - i)) * 2; int value = 1 + random.nextInt(Math.max(1, avgMoney - 1)); redpackageNumbers[i] = value; useMoney += value; } } logger.info(\u0026#34;Created red package raw: {}, amounts: {}\u0026#34;, redpackageNumbers, Arrays.asList(redpackageNumbers)); return Arrays.asList(redpackageNumbers); } } RedPackageService.java 1 2 3 4 5 6 7 8 9 10 11 12 package com.example.demo.service; import java.util.List; public interface RedPackageService { String writeRedPackages(int totalMoney, int redpackageNumber); Integer rob(String redpackageKey, String userId) throws Exception; List\u0026lt;Integer\u0026gt; splitRedPackageAlgorithm(int totalMoney, int redpackageNumber); } DemoApplication.java 1 2 3 4 5 6 7 8 9 10 11 12 13 package com.example.demo; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication public class DemoApplication { public static void main(String[] args) { SpringApplication.run(DemoApplication.class, args); } } application.yaml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 server: port: 8080 spring: application: name: demo data: redis: host: localhost port: 6379 lettuce: pool: max-active: 8 max-wait: -1ms max-idle: 8 min-idle: 0 测试 访问http://localhost:8080/red/send?totalMoney=100\u0026amp;redpackageNumber=5，输出结果如下所示：\n1 2 3 4 5 6 7 8 { \u0026#34;code\u0026#34;: 0, \u0026#34;message\u0026#34;: \u0026#34;success\u0026#34;, \u0026#34;data\u0026#34;: { \u0026#34;key\u0026#34;: \u0026#34;redpackage:7fac1ca15feb4173859f3101a13e9f97\u0026#34;, \u0026#34;amounts\u0026#34;: [12, 28, 15, 29, 16] } } 访问http://localhost:8080/red/rob?redpackageKey=1abe520c30dc4ec0b4153e3708c01fd3\u0026amp;userId=2，输出结果如下所示：\n1 2 3 4 5 { \u0026#34;code\u0026#34;: 0, \u0026#34;message\u0026#34;: \u0026#34;success\u0026#34;, \u0026#34;data\u0026#34;: \u0026#34;54\u0026#34; } 注意：这里的ID要和上面的一致\n附录——深入了解 RedisTemplate 的 leftPushAll 与序列化问题 在使用 Spring Data Redis 时，RedisTemplate 提供了丰富的操作方法，其中 leftPushAll（左侧批量推送）是一个常用的列表操作方法。本文围绕两个常见疑问展开：① leftPushAll 能否传入 Object...、Collection、以及为什么有时需要将 ArrayList 转换为数组；② RedisTemplate 的序列化问题以及潜在的隐性 Bug。\n使用 leftPushAll 时，理论上可以用两种形式： 变参形式：leftPushAll(key, value1, value2, ...) 集合形式：leftPushAll(key, collection) 如果遇到将 ArrayList 直接传入无法生效的情况，可以尝试将集合转换为数组再调用，作为一种兼容性手段，但并非必要的做法，优先确保版本与重载匹配正确。 序列化是影响 Redis 数据可用性的关键因素。统一、明确的序列化策略能避免大多数问题。建议使用 String 键 + JSON（或自定义序列化器）的组合，并确保在写入和读取时使用同样的序列化配置。 1) RedisTemplate 中 leftPushAll 的参数形式 支持的参数形式\nleftPushAll(K key, V... values)：可以传一组可变参数，等价于将多个值逐个推入到左边。 leftPushAll(K key, Collection\u0026lt;V\u0026gt; values)：也可以传入一个 Collection，将集合中的元素逐个推入到左边。 常见的困惑点\n有些开发者在实践中遇到将 ArrayList\u0026lt;V\u0026gt; 直接作为参数传入时失败的问题，或者感觉“不工作”。其实问题通常出在 Java 方法重载分辨的类型匹配、或者序列化导致的写入失败，而不一定是 API 自身对 Collection 的支持问题。 关键点在于：确保传入的类型与 RedisTemplate 的泛型参数一致，并且底层的序列化策略能够正确序列化这些对象。 为什么有时需要把 ArrayList 转换为数组 V[]？\n某些版本的 RedisTemplate 的重载实现或编译期行为，可能在编译时推断出具体的 V... values 的数组形式，从而更直接地匹配到 leftPushAll(K, V...)。如果传入的是 Collection\u0026lt;V\u0026gt;，理论上也应工作，但在具体实现或版本差异上，可能出现边缘情况导致调用不走你期望的重载。 将 ArrayList\u0026lt;V\u0026gt; 手动转换为 V[]（例如 values.toArray((V[]) new Object[0])）可以确保调用到你明确的变参重载，从而规避某些版本的坑。但这并非必要的普遍做法，更多的是一个“保险性”的兼容手段。 实操建议\n优先使用你熟悉的形式：\nredisTemplate.opsForList().leftPushAll(key, valuesArray)，其中 valuesArray 为 V[]。 或者 redisTemplate.opsForList().leftPushAll(key, collection)，直接传 Collection\u0026lt;V\u0026gt;。 如果遇到某个版本出现“无法调用正确的重载”或运行时异常，尝试将 Collection 转换为数组再调用一次：\n1 List\u0026lt;V\u0026gt; list = new ArrayList\u0026lt;\u0026gt;();// filling list ...V[] arr = (V[]) list.toArray(new Object[0]);redisTemplate.opsForList().leftPushAll(key, arr); 但请注意：直接将 List\u0026lt;V\u0026gt; 转换为 V[] 时，需要确保类型安全，避免 ClassCastException。在 Java 泛型擦除的场景下，通常使用适配代码或者通过具体类型实例化一个正确类型的数组。\n2) RedisTemplate 的序列化问题 为什么序列化很关键？\nRedisTemplate 在往 Redis 写入数据前，会把 Java 对象序列化成字节数组。读取时再把字节数组反序列化成 Java 对象。序列化策略直接决定了你能否正确存取、检索和比较数据。 常见序列化策略有：JDK 序列化、JSON（如 Jackson2JsonRedisSerializer）、String 序列化、FastJSON 等。 常见的问题点\n序列化不一致：写入时使用一种序列化方式，读取时使用另一种，可能导致反序列化失败或数据不可读。 非对称的对象结构：自定义对象若没有正确的序列化实现（如缺少无参构造、缺失 Serializable 等），可能在反序列化时出错。 字符串化 vs 对象化：把对象错误地序列化成字符串，取回时需要再次解析，容易出错。 存入原始字节但读取时却以对象方式处理，或对同一 Key 使用了不同的 Template（不同的序列化策略）导致数据不可用。 如何正确配置序列化？\n统一的序列化策略是关键。推荐做法： 对键使用 StringRedisSerializer，对值使用 Jackson2JsonRedisSerializer（或自定义的 JSON 序列化器），对哈希键/值也保持一致。 为自定义对象定义明确的序列化/反序列化配置，确保对象具备可序列化的结构。 示例配置（简化版，基于 Spring Boot）： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 @Bean public RedisTemplate\u0026lt;String, Object\u0026gt; redisTemplate(RedisConnectionFactory connectionFactory) { RedisTemplate\u0026lt;String, Object\u0026gt; template = new RedisTemplate\u0026lt;\u0026gt;(); template.setConnectionFactory(connectionFactory); // 键序列化 StringRedisSerializer stringSerializer = new StringRedisSerializer(); template.setKeySerializer(stringSerializer); template.setHashKeySerializer(stringSerializer); // 值序列化（对象 -\u0026gt; JSON） Jackson2JsonRedisSerializer\u0026lt;Object\u0026gt; jacksonSerializer = new Jackson2JsonRedisSerializer\u0026lt;\u0026gt;(Object.class); ObjectMapper om = new ObjectMapper(); om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY); om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL); jacksonSerializer.setObjectMapper(om); template.setValueSerializer(jacksonSerializer); template.setHashValueSerializer(jacksonSerializer); template.afterPropertiesSet(); return template; } 注意：如果你明确知道存入的是某一类具体对象，可以将 Jackson2JsonRedisSerializer 的泛型改为该对象类型，以提升反序列化的安全性和效率。\n参考资料 redisTemplate中leftPushAll隐性bug的问题\n","date":"2025-09-06T23:34:25-08:00","permalink":"https://hanguangwu.github.io/p/%E4%BD%BF%E7%94%A8java%E5%92%8Credis%E5%AE%9E%E7%8E%B0%E6%8A%A2%E7%BA%A2%E5%8C%85%E5%8A%9F%E8%83%BD/","title":"使用Java和Redis实现抢红包功能"},{"content":"前言 原作者用的是commonJS语法， 代码结构也很混乱特别是后端部分，这里按照我在别处学到的内容做了一些修改，确保一个文件中不会有太多代码。\n作者没有开源源代码，这里的代码可能存在一些小问题。\n主要技术栈：MongoDB, Express, React, Node.js\n简介 Full Stack Travel Story App Using MERN Stack | MongoDB, Express, React, Node.js | MERN Project——YouTube视频链接\nIn this video, we will build a Full Stack Travel Story App using the MERN stack (MongoDB, Express, React, Node.js). This app allows users to sign up, log in, and create personal travel stories with features like image uploads, and adding travel date. We also implement search functionality to find stories, filter by date range, and pin favorite stories to the top. Users can also edit or delete their stories..\nThe backend features secure JWT authentication, MongoDB for storing user data and travel stories, and APIs for adding, editing, deleting stories, and uploading images. This tutorial covers the entire development process, from setting up the frontend and backend to integrating APIs and building the UI components.\n使用教程 git clone 整个项目\n添加.env配置信息\ncd backend 先执行npm install再执行npm start\ncd frontend 先执行npm install再执行npm run dev\n默认打开http://localhost:5173\nTimeStamps Frontend React Project Setup 00:00 - Demo of Travel Story App 04:50 - Frontend React app setup 执行如下指令：\n1 2 3 4 5 mkdir TravelStory cd TravelStory mkdir frontend mkdir backend cd frontend 执行npm create vite@latest .创建项目，选择React和JavaScript。\n然后执行如下指令：\n1 2 npm install npm run dev 输出结果如下所示：\n1 2 3 4 added 264 packages in 3m 102 packages are looking for funding run `npm fund` for details 在src目录下创建components、pages和utils目录，在pages目录下创建Home、Login和SignUp页面\n安装VSCode插件ES7+ React/Redux/React-Native snippets\n新建.jsx文件使用rafce快速生成相应内容\n删除src目录下的App.css文件\n修改index.css文件和App.jsx文件\n添加google font Poppins\nhttps://fonts.google.com/specimen/Poppins\n在index.css文件开头加入如下内容：\n1 @import url(\u0026#39;https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900\u0026amp;display=swap\u0026#39;); 08:41 - Tailwind CSS setup vite 版本\nInstall Tailwind CSS with Vite\nInstall tailwindcss and its peer dependencies, then generate your tailwind.config.js and postcss.config.js files.\n1 2 npm install -D tailwindcss postcss autoprefixer npx tailwindcss init -p 即在frontend目录下执行npm install -D tailwindcss postcss autoprefixer\n再执行npx tailwindcss init -p\n输出结果如下所示：\n1 2 3 4 5 6 7 added 85 packages in 7s 125 packages are looking for funding run `npm fund` for details Created Tailwind CSS config file: tailwind.config.js Created PostCSS config file: postcss.config.js Configure your template paths\nAdd the paths to all of your template files in your tailwind.config.js file.\ntailwind.config.js\n1 2 3 4 5 6 7 8 9 10 11 /** @type {import(\u0026#39;tailwindcss\u0026#39;).Config} */ export default { content: [ \u0026#34;./index.html\u0026#34;, \u0026#34;./src/**/*.{js,ts,jsx,tsx}\u0026#34;, ], theme: { extend: {}, }, plugins: [], } Add the Tailwind directives to your CSS\nAdd the @tailwind directives for each of Tailwind’s layers to your ./src/index.css file.\n1 2 3 @tailwind base; @tailwind components; @tailwind utilities; 此时index.css文件内容如下所示：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 @import url(\u0026#39;https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900\u0026amp;display=swap\u0026#39;); @tailwind base; @tailwind components; @tailwind utilities; @layer base { html { font-family: \u0026#34;Poppins\u0026#34;, \u0026#34;sans-serif\u0026#34;; } body { background-color: #fdfeff; overflow-x: hidden; } } 此时tailwind.config.js内容如下所示：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 /** @type {import(\u0026#39;tailwindcss\u0026#39;).Config} */ export default { content: [ \u0026#34;./index.html\u0026#34;, \u0026#34;./src/**/*.{js,ts,jsx,tsx}\u0026#34;, ], theme: { fontFamily: { display: [\u0026#34;Poppins\u0026#34;, \u0026#34;sans-serif\u0026#34;], }, extend: { // Colors used in the project colors: { primary: \u0026#34;#05B6D3\u0026#34;, secondary: \u0026#34;#EF863E\u0026#34;, } }, }, plugins: [], } 11:33 - react-router-dom installation \u0026amp; setup 执行npm i react-route-dom\nBackend 14:32 - Backend Node.js Express project setup 在backend目录下执行npm init -y\n输出信息如下所示：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 Wrote to /home/xxxxxxxx/TravelStory/backend/package.json: { \u0026#34;name\u0026#34;: \u0026#34;travelstory\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;index.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34; }, \u0026#34;keywords\u0026#34;: [], \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34; } 在backend目录下执行npm i express mongoose jsonwebtoken dotenv cors nodemon bcrypt\n输出结果如下所示：\n1 2 3 4 5 6 7 8 9 10 11 npm warn deprecated inflight@1.0.6: This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful. npm warn deprecated npmlog@5.0.1: This package is no longer supported. npm warn deprecated rimraf@3.0.2: Rimraf versions prior to v4 are no longer supported npm warn deprecated are-we-there-yet@2.0.0: This package is no longer supported. npm warn deprecated glob@7.2.3: Glob versions prior to v9 are no longer supported npm warn deprecated gauge@3.0.2: This package is no longer supported. added 183 packages in 9s 22 packages are looking for funding run `npm fund` for details 在backend目录下创建index.js\n修改package.json文件，增加如下内容：\u0026quot;start\u0026quot;: \u0026quot;nodemon index.js\u0026quot;\n创建models文件夹和.env文件\n此时index.js文件内容如下所示：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 const bcrypt = require(\u0026#34;bcrypt\u0026#34;); const express = require(\u0026#34;express\u0026#34;); const cors = require(\u0026#34;cors\u0026#34;); const jwt = require(\u0026#34;jsonwebtoken\u0026#34;); const app = express(); app.use(express.json()); app.use(cors({ origin: \u0026#34;*\u0026#34; })); //Test api app.post(\u0026#34;/hello\u0026#34;, async (req, res) =\u0026gt; { return res.status(200).json({ message: \u0026#34;hello\u0026#34; }); }) app.listen(8000); module.exports = app; 执行npm start启动\n可以通过http://localhost:8000/hello查看输出信息\n18:51 - MongoDB Atlas configuration https://cloud.mongodb.com/\n新建项目Travel-Story\nDeploy your cluster\nUse a template below or set up advanced configuration options. You can also edit these configuration options once the cluster is created.\nAdd a connection IP address\nCreate a database user\n保存密码\nConnecting with MongoDB Driver\n创建config.json装填MONGO_DB_URI\n23:05 - Creating User schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 import mongoose from \u0026#34;mongoose\u0026#34; const userSchema = new mongoose.Schema({ username: { type: String, required: true, }, email: { type: String, required: true, unique: true, }, password: { type: String, required: true, }, createdAt: { type: Date, default: Date.now(), }, }) const User = mongoose.model(\u0026#34;User\u0026#34;, userSchema) export default User 24:26 - Create Account API 执行node -e \u0026quot;console.log(require('crypto').randomBytes(64).toString('hex'))\u0026quot;\n输出结果如下所示：\n1 39cd7527a217f289590110725fa0885fd067cc835eb97bebdbeaa3373658d68ab9164ebf20285bdbc83e0a354e9a2932a0b46c00d02ed5d2a4dd3bed30c320df Error connecting to MongoDB Could not connect to any servers in your MongoDB Atlas cluster. One common reason is that you\u0026rsquo;re trying to access the database from an IP that isn\u0026rsquo;t whitelisted. Make sure your current IP address is on your Atlas cluster\u0026rsquo;s IP whitelist: https://www.mongodb.com/docs/atlas/security-whitelist/\nMongodb开启所有IP\nnetwork access 添加 0.0.0.0\n31:10 - Login API 35:02 - Get User API and JWT token authentication 本人在此安装了cookie-parser，相应指令为npm i cookie-parser\n40:04 - Add Travel Story API 要在Postman中生成JWT令牌，您可以按照以下步骤操作：\n打开Postman应用程序并创建一个新的请求。 在请求中选择“Authorization”选项卡。 在“Type”下拉菜单中选择“Bearer Token”。 在“Token”输入框中输入您的JWT令牌。 单击“Send”按钮，您的请求将包含JWT令牌。 请注意，您需要事先获得JWT令牌才能在Postman中使用它。您可以从您的身份验证服务器或第三方服务中获取JWT令牌。\ngenerateToken.js\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import jwt from \u0026#34;jsonwebtoken\u0026#34;; const generateTokenAndSetCookie = (userId, res) =\u0026gt; { const token = jwt.sign({ userId }, process.env.JWT_SECRET, { expiresIn: \u0026#34;15d\u0026#34;, }); res.cookie(\u0026#34;jwt\u0026#34;, token, { maxAge: 15 * 24 * 60 * 60 * 1000, // MS httpOnly: true, // prevent XSS attacks cross-site scripting attacks sameSite: \u0026#34;strict\u0026#34;, // CSRF attacks cross-site request forgery attacks secure: process.env.NODE_ENV !== \u0026#34;development\u0026#34;, }); }; export default generateTokenAndSetCookie; 在上面的代码中返回或输出token均可，视情况而定。\n49:05 - Get All Travel Stories API 51:07 - Image Upload API using Multer 在backend目录下执行npm i multer\n1 2 3 4 5 6 7 cd backend xxxxxxxx@DESKTOP-393QBO3:~/TravelStory/backend$ npm i multer added 16 packages in 3s 23 packages are looking for funding run `npm fund` for details Multer是一个用来处理文件上传的Node.js中间件。它允许你轻松地上传文件到服务器。Multer非常灵活，支持处理单个文件上传、多个文件上传，以及各种自定义的上传设置。在Express框架中，Multer可以轻松地与路由处理函数一起使用，使得处理文件上传变得非常简单。它可以处理文件的解析、文件大小的限制、文件类型的限制等等。Multer在Node.js开发中用途广泛，特别是在需要实现文件上传功能的Web应用程序中。\n1 2 3 import upload from \u0026#34;../utils/multer.js\u0026#34;; import fs from \u0026#34;fs\u0026#34;; import path from \u0026#34;path\u0026#34;; 1 2 3 4 5 6 7 8 9 10 11 12 13 export const imageUpload = async (req, res) =\u0026gt; { try { if (!req.file) { return res.status(400).json({ error: true, message: \u0026#34;No image uploaded\u0026#34; }) } const imageUrl = `http://localhost:5000/uploads/${req.file.filename}`; res.status(201).json({ imageUrl }); } catch (error) { res.status(500).json({ error: true, message: error.message }) } } 1 router.post(\u0026#34;/image-upload\u0026#34;, upload.single(\u0026#34;image\u0026#34;), imageUpload) PostMan无法上传图片，解决办法详见链接。\nhttps://stackoverflow.com/questions/60036239/upload-file-failed-postman\nThis was what was in my Postman Settings. But in my Desktop, the folder was names as Postman Agent, so the path was ~/Postman Agent/files. Therefore Postman couldn\u0026rsquo;t read from my system, rename Postman Agent in your local machine to Postman.\nThis is more like a bug with Postman (already open issue, still not corrected).\n下面这句代码报错，报错信息为\n1 2 3 4 5 app.use(\u0026#34;/uploads\u0026#34;, express.static(path.join(__dirname, \u0026#34;uploads\u0026#34;))); ^ ReferenceError: __dirname is not defined in ES module scope This file is being treated as an ES module because it has a \u0026#39;.js\u0026#39; file extension and \u0026#39;/home/xxxxxxxx/TravelStory/backend/package.json\u0026#39; contains \u0026#34;type\u0026#34;: \u0026#34;module\u0026#34;. To treat it as a CommonJS script, rename it to use the \u0026#39;.cjs\u0026#39; file extension. 有问题的代码如下：\napp.use(\u0026quot;/uploads\u0026quot;, express.static(path.join(__dirname, \u0026quot;uploads\u0026quot;)));\n这该怎么改正？\n要解决这个问题，可以将该文件的扩展名从.js改为.cjs，或者将package.json中的\u0026quot;type\u0026quot;: \u0026quot;module\u0026quot;改为\u0026quot;type\u0026quot;: \u0026quot;commonjs\u0026quot;。这样就可以在CommonJS模块的范围内使用__dirname了。修改后的代码示例如下：\n1 app.use(\u0026#34;/uploads\u0026#34;, express.static(path.join(__dirname, \u0026#34;uploads\u0026#34;))); 要在ES6模块的范围内使用__dirname，可以通过使用import.meta.url来动态获取当前模块的路径。修改后的代码如下所示：\n1 2 3 4 5 6 7 8 import { fileURLToPath } from \u0026#39;url\u0026#39;; import { dirname } from \u0026#39;path\u0026#39;; import express from \u0026#39;express\u0026#39;; const __filename = fileURLToPath(import.meta.url); const __dirname = dirname(__filename); app.use(\u0026#34;/uploads\u0026#34;, express.static(path.join(__dirname, \u0026#34;uploads\u0026#34;))); 这样就可以在ES6模块中使用__dirname来获取当前模块的路径了。\n58:21 - Delete Image API 01:04:15 - Edit Travel Story API 01:09:53 - Delete Travel Story API 01:13:58 - Update isFavourite API 01:18:19 - Search Stories API 01:21:58 - Filter Stories by Date Range Frontend 01:26:12 - Login screen UI 添加images，修改tailwind.config.js\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 /** @type {import(\u0026#39;tailwindcss\u0026#39;).Config} */ export default { content: [ \u0026#34;./index.html\u0026#34;, \u0026#34;./src/**/*.{js,ts,jsx,tsx}\u0026#34;, ], theme: { fontFamily: { display: [\u0026#34;Poppins\u0026#34;, \u0026#34;sans-serif\u0026#34;], }, extend: { // Colors used in the project colors: { primary: \u0026#34;#05B6D3\u0026#34;, secondary: \u0026#34;#EF863E\u0026#34;, }, backgroundImage: { \u0026#39;login-bg-img\u0026#39;: \u0026#34;url(\u0026#39;./src/assets/images/bg-image.png\u0026#39;)\u0026#34;, \u0026#39;signup-bg-img\u0026#39;: \u0026#34;url(\u0026#39;./src/assets/images/signup-bg-image.jpg\u0026#39;)\u0026#34;, } }, }, plugins: [], } 在index.css中添加如下内容\n1 2 3 4 5 6 7 8 9 @layer components { .input-box { @apply w-full text-sm bg-cyan-600/5 rounded px-5 py-3 mb-4 outline-none; } .btn-primary { @apply w-full text-sm font-medium text-white bg-cyan-500 shadow-lg shadow-cyan-200/50 p-[10px] rounded-full my-1 hover:bg-cyan-100 hover:text-primary; } } 创建passwordInput.jsx文件\n安装npm i react-icons\n新增utils/helper.js\n01:42:28 - Login API integration 在frontend目录下安装axios npm i axios\n在utils目录下创建constants.js和axiosInstance.js\n01:54:14 - Sign-up screen UI 01:57:29 - Create Account API integration 02:01:57 - Home page UI 02:04:55 - Get User Info API integration 在Cards目录下添加ProfileInfo.jsx\n02:08:00 - Navbar Profile Card 02:14:20 - Get All Stories API integration 创建emptycard、StoryCard\n02:17:07 - Travel Story Card component 按照moment 执行npm i moment\n02:26:30 - Function to update isFavourite 安装react-toastify执行npm i react-modal\n安装react-modal 执行npm i react-modal\n02:34:14 - Add/Edit Travel Story 在index.css中添加\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 @import url(\u0026#39;https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900\u0026amp;display=swap\u0026#39;); @tailwind base; @tailwind components; @tailwind utilities; @layer base { html { font-family: \u0026#34;Poppins\u0026#34;, \u0026#34;sans-serif\u0026#34;; } body { background-color: #fdfeff; overflow-x: hidden; } } /* Customize scrollbar styles*/ .scrollbar::-webkit-scrollbar { width: 3px; height: 3px; } .scrollbar::-webkit-scrollbar-thumb { background-color: #057c8e; border-radius: 3px; } .scrollbar::-webkit-scrollbar-track { background-color: rgb(172, 201, 229); } @layer components { .input-box { @apply w-full text-sm bg-cyan-600/5 rounded px-5 py-3 mb-4 outline-none; } .btn-primary { @apply w-full text-sm font-medium text-white bg-cyan-500 shadow-lg shadow-cyan-200/50 p-[10px] rounded-full my-1 hover:bg-cyan-100 hover:text-primary; } .login-ui-box { @apply w-80 h-[450px] rounded-full bg-primary absolute rotate-45 } .model-box { @apply w-[80vw] md:w-[40%] h-[80vh] bg-white rounded-lg mx-auto mt-14 p-5 overflow-y-scroll scrollbar z-50; } .icon-btn { @apply text-[22px] text-slate-300 cursor-pointer hover:text-red-500; } .btn-small { @apply flex items-center gap-1 text-xs font-medium bg-cyan-50 text-primary shadow-cyan-100/0 border border-cyan-100 hover:bg-primary hover:text-white rounded px-3 py-[3px]; } .input-label { @apply text-xs text-slate-400; } .btn-delete { @apply bg-rose-50 text-rose-500 shadow-cyan-100/0 border border-rose-100 hover:border-rose-500 hover:text-white; } } 新增Input目录下DateSelector\n02:47:12 - Date Selector component 安装react-day-picker 执行npm i react-day-picker\n在main.jsx中添加import \u0026quot;react-day-picker/style.css\u0026quot;;\n在index.css中添加\n1 2 3 4 5 6 .rdp-root { --rdp-accent-color: #01b0cb; --rdp-accent-background-color: #dffbff; --rdp-day_button-border-radius: 8px; --rdp-selected-font: bold medium var(--rdp-font-family); } 02:58:34 - Custom Image Picker component 增加ImageSelector组件\n添加TagInput组件\n03:22:10 - Function to add new Travel Story 03:24:34 - Utility function to upload image 在utils下面添加uploadImage.js\n03:31:43 - View Travel Story popup modal 在home目录下添加ViewTravelStory.jsx\n03:45:11 - Function to update story 03:51:20 - Function to delete Travel Story image 03:58:37 - Function to delete story 04:09:54 - Search Bar component 04:14:05 - Search Stories API integration 04:17:59 - Date Range Picker component 04:21:31 - Filter Travel Stories by date range 04:25:35 - Filter Info Title component 在Cards下新建FilterInfoTitle.jsx\n附录 没用上的utilities.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 const jwt = require(\u0026#39;jsonwebtoken\u0026#39;) function authenticateToken(req, res, next) { const authHeader = req.headers[\u0026#34;authorization\u0026#34;]; const token = authHeader \u0026amp;\u0026amp; authHeader.split[\u0026#34; \u0026#34;][1]; // No token, unauthorized if (!token) return res.sendState(401); jwt.verify(token, process.env.JWT_SECRET, (err, user) =\u0026gt; { // Token invalid, forbidden if(err) return res.sendStatus(401); req.user = user; next(); }); } module.exports = { authenticateToken, }; 自用需要配置.env 1 2 3 4 5 6 7 PORT=xxxx JWT_SECRET=xxxxxxxxxxx MONGO_DB_URI=xxxxxxx NODE_ENV=xxxxxx Wiki: bcrypt vs brypt.js Short summary: bcrypt is a native (C++) module, thus much faster than bcryptjs which is a pure js module.\nbcrypt sometimes requires additional steps to build correctly, especially if you are using architectures other than x86_64 or a glibc based distro. You will need additional dependencies to compile from source.\nbcryptjs is plain js, hence works everywhere, even browsers. bcrypt runs only on NodeJS, Node-WebKit or Electron.\nFree SVG converter https://www.freeconvert.com/jpg-to-svg/download\nhttps://picsvg.com/\nPicsvg\nNeed to convert a picture to SVG format ?\nPicsvg is a free online converter that can convert an image to a SVG file.You can upload an image file (jpg,gif,png) up to 4 Mb, then you can select effects to enhance the SVG image result.\n","date":"2024-09-28T18:34:25-08:00","permalink":"https://hanguangwu.github.io/p/mern%E5%85%A8%E6%A0%88%E9%A1%B9%E7%9B%AEtravelstory%E7%AE%80%E8%BF%B0/","title":"MERN全栈项目——TravelStory简述"}]